<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplicationNeedPermissionText" xml:space="preserve">
    <value>Appliaction needs perrmission</value>
  </data>
  <data name="AutomaticServiceChoosing" xml:space="preserve">
    <value>Automatic service and characteristic choosing</value>
  </data>
  <data name="BLEData" xml:space="preserve">
    <value>Bluetooth data</value>
  </data>
  <data name="CharacteristicReceiveUUIDLabel" xml:space="preserve">
    <value>Receiving characteristic UUID</value>
  </data>
  <data name="CharacteristicSendUUIDLabel" xml:space="preserve">
    <value>Sending characteristic UUID</value>
  </data>
  <data name="Charts" xml:space="preserve">
    <value>Charts t/f</value>
  </data>
  <data name="ConnectText" xml:space="preserve">
    <value>Connect</value>
  </data>
  <data name="EmptyText" xml:space="preserve">
    <value>Empty</value>
  </data>
  <data name="ErrorConnectingBLE" xml:space="preserve">
    <value>Error connecting to BLE device</value>
  </data>
  <data name="ErrorTitle" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ExportData" xml:space="preserve">
    <value>Export data</value>
  </data>
  <data name="FindDevice" xml:space="preserve">
    <value>Find device</value>
  </data>
  <data name="LanguageENG" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="LanguagePL" xml:space="preserve">
    <value>Polish</value>
  </data>
  <data name="PerrmisionRequiredTitle" xml:space="preserve">
    <value>Permission required</value>
  </data>
  <data name="ScanButtonText" xml:space="preserve">
    <value>Scan</value>
  </data>
  <data name="ServiceUUIDLabel" xml:space="preserve">
    <value>Service UUID</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="StopScanningText" xml:space="preserve">
    <value>Stop scanning</value>
  </data>
  <data name="Theme" xml:space="preserve">
    <value>Theme</value>
  </data>
  <data name="GoBackText" xml:space="preserve">
    <value>Go back</value>
  </data>
  <data name="BleOff" xml:space="preserve">
    <value>Bluetooth is turned off</value>
  </data>
  <data name="BleUnavailable" xml:space="preserve">
    <value>Bluetooth is unavailable</value>
  </data>
  <data name="SamplingFreq" xml:space="preserve">
    <value>Sampling frequency</value>
  </data>
  <data name="TimeToReadMindInMin" xml:space="preserve">
    <value>Time to read data in minutes</value>
  </data>
  <data name="ID" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="Sample" xml:space="preserve">
    <value>Sample</value>
  </data>
  <data name="Connecting" xml:space="preserve">
    <value>Connecting</value>
  </data>
  <data name="ScanningMessage" xml:space="preserve">
    <value>Scanning...</value>
  </data>
  <data name="ExportingToExcellMessage" xml:space="preserve">
    <value>Exporting to excell...</value>
  </data>
  <data name="SettingUpChartsMessage" xml:space="preserve">
    <value>Setting up charts...</value>
  </data>
  <data name="DisconnectingMessage" xml:space="preserve">
    <value>Disconnecting...</value>
  </data>
  <data name="GettingCharacteristicMessage" xml:space="preserve">
    <value>Characteristic dowload...</value>
  </data>
  <data name="SendingMessage" xml:space="preserve">
    <value>Sending...</value>
  </data>
  <data name="ExcellProcessing" xml:space="preserve">
    <value>Samples processing...</value>
  </data>
  <data name="ChartMiddlePoint" xml:space="preserve">
    <value>Chart middle point</value>
  </data>
  <data name="EnterNumber" xml:space="preserve">
    <value>Enter number</value>
  </data>
  <data name="NumberOfSamplesToShow" xml:space="preserve">
    <value>Number of samples to show on chart from the middle point</value>
  </data>
  <data name="FreqDomain" xml:space="preserve">
    <value>Frequency domain</value>
  </data>
  <data name="TimeDomain" xml:space="preserve">
    <value>Time domain</value>
  </data>
  <data name="ShowFreqDomain" xml:space="preserve">
    <value>Show frequency domain</value>
  </data>
  <data name="ShowTimeDomain" xml:space="preserve">
    <value>Show time domain</value>
  </data>
  <data name="ExportTimeSamples" xml:space="preserve">
    <value>Export time samples</value>
  </data>
  <data name="ExportFreqSamples" xml:space="preserve">
    <value>Export frequency samples</value>
  </data>
  <data name="Freqz" xml:space="preserve">
    <value>Frequencies</value>
  </data>
  <data name="GattServiceNotFoundError" xml:space="preserve">
    <value>UART GATT service not found.</value>
  </data>
  <data name="BleSetupError" xml:space="preserve">
    <value>Configuring BLE adapter resulted in error</value>
  </data>
  <data name="GattInitError" xml:space="preserve">
    <value>GATT Service init failed</value>
  </data>
  <data name="BleCommandSendingError" xml:space="preserve">
    <value>Error sending comand to BLE device</value>
  </data>
  <data name="BleDisconnectError" xml:space="preserve">
    <value>Error while disconecting ble device</value>
  </data>
  <data name="SettingUpFreqChartsMessage" xml:space="preserve">
    <value>Setting up frequency charts</value>
  </data>
  <data name="CalculateFFT" xml:space="preserve">
    <value>Calculating fft...</value>
  </data>
  <data name="ShouldCalculateFFT" xml:space="preserve">
    <value>Should calculate FFT on charts load</value>
  </data>
  <data name="CalculateFFTButtonText" xml:space="preserve">
    <value>Calculate FFT</value>
  </data>
  <data name="OpenPageText" xml:space="preserve">
    <value>Page loading</value>
  </data>
  <data name="StartSettingTitle" xml:space="preserve">
    <value>Measure setting</value>
  </data>
  <data name="StartSettingTest" xml:space="preserve">
    <value>Test measure (15 s, 80Hz)</value>
  </data>
  <data name="StartSettingUserDefined" xml:space="preserve">
    <value>Measure defined in settings</value>
  </data>
  <data name="StartSettingBasic" xml:space="preserve">
    <value>Measure 15 min 160Hz</value>
  </data>
  <data name="StartSettingAdvanced" xml:space="preserve">
    <value>Measure 15 min 500Hz</value>
  </data>
  <data name="StartSettingFull" xml:space="preserve">
    <value>Measure 60 min 500Hz</value>
  </data>
  <data name="StartSettingMinimal" xml:space="preserve">
    <value>Measure 1 min 80Hz</value>
  </data>
  <data name="StartSettingShortHighSampleRate" xml:space="preserve">
    <value>Measure 5 min 500Hz</value>
  </data>
  <data name="StartSettingLongLowSampleRate" xml:space="preserve">
    <value>Measure 30 min 80Hz</value>
  </data>
  <data name="StartMeasure" xml:space="preserve">
    <value>Start measure</value>
  </data>
  <data name="GenerateSinwave" xml:space="preserve">
    <value>Generate sinwave</value>
  </data>
  <data name="SinwaveAmplitude" xml:space="preserve">
    <value>Amplitude</value>
  </data>
  <data name="SinwaveLength" xml:space="preserve">
    <value>Length(should be power of 2)</value>
  </data>
  <data name="SinwaveFreqency" xml:space="preserve">
    <value>Singal frequenct</value>
  </data>
  <data name="GenerateText" xml:space="preserve">
    <value>Generate</value>
  </data>
  <data name="FFTSettingsDefault" xml:space="preserve">
    <value>Default signal</value>
  </data>
  <data name="FFTSettingsFilter" xml:space="preserve">
    <value>Filtered signal</value>
  </data>
  <data name="FFTSettingsFilterAndWindow" xml:space="preserve">
    <value>Filtered and windowed signal</value>
  </data>
  <data name="FFTSettingsWindow" xml:space="preserve">
    <value>Windowed signal</value>
  </data>
  <data name="ExportCSV" xml:space="preserve">
    <value>Export csv</value>
  </data>
  <data name="ExportExcel" xml:space="preserve">
    <value>Export xlsx</value>
  </data>
  <data name="AnswerText" xml:space="preserve">
    <value>Answer</value>
  </data>
  <data name="BrainActivity" xml:space="preserve">
    <value>Activity while gathering data</value>
  </data>
  <data name="ReceivedDataText" xml:space="preserve">
    <value>Received</value>
  </data>
  <data name="ReadingText" xml:space="preserve">
    <value>Reading...</value>
  </data>
  <data name="CheckText" xml:space="preserve">
    <value>Check answer</value>
  </data>
  <data name="TimeForRelaxText" xml:space="preserve">
    <value>Relax for a little while</value>
  </data>
  <data name="TimeToFocusText" xml:space="preserve">
    <value>Focus and solve exercises</value>
  </data>
  <data name="NoData" xml:space="preserve">
    <value>There is no data to share</value>
  </data>
  <data name="CutoffFreqForLowPasFilter" xml:space="preserve">
    <value>Cutoff frequency of low pass filter</value>
  </data>
  <data name="CorrectAnswersText" xml:space="preserve">
    <value>Correct answers: </value>
  </data>
  <data name="TestSignalButton" xml:space="preserve">
    <value>Test signal</value>
  </data>
  <data name="AlfaWavesText" xml:space="preserve">
    <value>Alfa waves</value>
  </data>
  <data name="BetaWavesText" xml:space="preserve">
    <value>Beta waves</value>
  </data>
  <data name="DeltaWavesText" xml:space="preserve">
    <value>Delta waves</value>
  </data>
  <data name="ThetaWavesText" xml:space="preserve">
    <value>Theta waves</value>
  </data>
  <data name="WavesTitle" xml:space="preserve">
    <value>Waves</value>
  </data>
  <data name="ChartsWaves" xml:space="preserve">
    <value>Charts waves</value>
  </data>
  <data name="TestMeasurements" xml:space="preserve">
    <value>Test signal</value>
  </data>
  <data name="TimeFreqMeasurement" xml:space="preserve">
    <value>Simple measurement</value>
  </data>
  <data name="WavesMeasurements" xml:space="preserve">
    <value>Specific waves measurement</value>
  </data>
  <data name="MeasurementType" xml:space="preserve">
    <value>Typ pomiaru</value>
  </data>
  <data name="StartOneHourMeasure" xml:space="preserve">
    <value>Start 1h measure</value>
  </data>
  <data name="CancelMeasure" xml:space="preserve">
    <value>Stop measure</value>
  </data>
  <data name="BadSamplesReceived" xml:space="preserve">
    <value>Bad samples received </value>
  </data>
  <data name="HowManyTimesToSendTestSignal" xml:space="preserve">
    <value>How many times send test signal</value>
  </data>
  <data name="TestReportIncorrectSamples" xml:space="preserve">
    <value>Incorrect received samples</value>
  </data>
  <data name="TestReportSamplesCount" xml:space="preserve">
    <value>Samples count</value>
  </data>
  <data name="TestReportTimestamp" xml:space="preserve">
    <value>Timestamp</value>
  </data>
  <data name="TestReportSamplesCorrectness" xml:space="preserve">
    <value>Correct data</value>
  </data>
</root>